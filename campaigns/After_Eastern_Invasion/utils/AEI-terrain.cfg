#textdomain wesnoth-AfterEI


# -----------------------------------------
# Rocky quagmire events (scenarios 5 and 6)
# -----------------------------------------

#define QUAGMIRE_SETUP
    [set_variable]
      name=mud_to_rock_ftd		# First time dialogue human steps on rocky quagmire
      value=yes
    [/set_variable]
    [set_variable]
      name=rock_to_mud_ftd		# First time dialogue goblin steps on rubble quagmire
      value=yes
    [/set_variable]
#enddef

#define QUAGMIRE_EVENTS SIDES
# MoveTo mud (rocky quagmire) - convert to rubble (side 1 only, humans are heavier than goblins)
  [event]
    name=moveto
    first_time_only=no
    [filter]
      [filter_location]
        terrain=Sm^Es
      [/filter_location]
      side=1
    [/filter]
    [terrain]
      terrain=Sm^Dr
      x,y=$x1,$y1
    [/terrain]
    [redraw]
    [/redraw]
    [if]
      [variable]
        name=mud_to_rock_ftd		# First time dialogue human steps on rocky quagmire
        equals=yes
      [/variable]
    [then]
      [set_variable]
        name=mud_to_rock_ftd
        value=no
      [/set_variable]
      [message]
        speaker=unit
        message= _ "Aha!  There's firm footing beneath this mud!"
      [/message]
    [/then]
    [/if]
  [/event]
#
  [event]			# MoveTo mud (rocky quagmire) - convert back to mud (not side 1, goblins are not heavy enough)
    name=moveto
    first_time_only=no
    [filter]
      [filter_location]
        terrain=Sm^Dr
      [/filter_location]
      side={SIDES}
    [/filter]
    [terrain]
      terrain=Sm^Es
      x,y=$x1,$y1
    [/terrain]
    [redraw]
    [/redraw]
    [if]
      [variable]
        name=rock_to_mud_ftd	# First time dialogue goblin steps on rubble quagmire
        equals=yes
      [/variable]
    [then]
      [set_variable]
        name=rock_to_mud_ftd
        value=no
      [/set_variable]
      [message]
        speaker=unit
        message= _ "Nooo!  Me stuck!"
      [/message]
      [message]
        speaker=Pierce
        message= _ "Haha, piddlin' goblins ain't big enough to reach solid ground!"
      [/message]
    [/then]
    [/if]
  [/event]
#enddef

#define QUAGMIRE_TIDYUP
    [clear_variable]
      name=mud_to_rock_ftd, rock_to_mud_ftd
    [/clear_variable]
#enddef



# ----------------------------------------
# Mushroom events (scenarios 15a and 15b2)
# ----------------------------------------

#define MUSHBOOT_PAD PADSPACE
    [set_variable]			# "Mushroom boot" setup
      name=mushboot_pad			# Padding (minimum distance between boots)
      value={PADSPACE}
    [/set_variable]
    [clear_variable]
      name=mushboot_locations		# Pure paranoia :-)
    [/clear_variable]
#enddef
#define MUSHBOOT_SETUP X Y E N H
    [store_locations]
      x={X}
      y={Y}
      terrain=Rb,Wwf
      find_in=ford_locations
      variable=mushboot_available_locations
    [/store_locations]
    [set_variable]
      name=mushboot_total
#ifdef EASY
      value={E}
#endif
#ifdef NORMAL
      value={N}
#endif
#ifdef HARD
      value={H}
#endif
    [/set_variable]
    [fire_event]
      name=mushboot_random_placement
    [/fire_event]
#enddef
#define MUSHBOOT_DISPLAY
    {FOREACH mushboot_locations i}	# Display boots on map (finally!)
      [item]
        x,y=$mushboot_locations[$i].x,$mushboot_locations[$i].y
        image=items/mushboot.png
      [/item]
    {NEXT i}
    [clear_variable]			# Only need mushboot_locations
      name=mushboot_pad
    [/clear_variable]
    [set_variable]
      name=mushboot_ftd			# "Mushroom boot" first time dialogue flag
      value=yes
    [/set_variable]
    [store_locations]			# Save mushroom locations (will re-grow)
      terrain="*^Em"
      variable=mushlocs
    [/store_locations]
    [set_variable]			# Dialogue first time unit steps on muddy quagmire+small mushrooms
      name=mspore_ftd
      value=yes
    [/set_variable]
#enddef
#define MUSHBOOT_TIDYUP
    {FOREACH mushboot_locations i}
      [if]
        [variable]
          name=mushboot_locations[$i].id
          not_equals=-1
        [/variable]
      [then]
        [remove_unit_overlay]
          id=$mushboot_locations[$i].id
          image=items/mushbootoverlay.png
        [/remove_unit_overlay]
      [/then]
      [/if]
    {NEXT i}
    [clear_variable]
      name=mushboot_ftd, mushboot_locations, mspore_ftd, mushlocs, is_player_unit, mushboot_user
    [/clear_variable]
#enddef
#define MUSHBOOT_EVENTS
  [event]
    name=mushboot_random_placement
    first_time_only=no
    [while]				# Assign location to boots in specified area
      [variable]
        name=mushboot_total
        greater_than=0
      [/variable]
      [do]
        [set_variable]
          name=mushboot_subscript
          rand=1..$mushboot_available_locations.length
        [/set_variable]
        [set_variable]
          name=mushboot_subscript
          sub=1
        [/set_variable]
        [set_variables]
          name=mushboot_locations	# Actual location(s) of boots
          mode=append
          [value]
            x=$mushboot_available_locations[$mushboot_subscript].x
            y=$mushboot_available_locations[$mushboot_subscript].y
            id=-1			# Flag as available
          [/value]
        [/set_variables]
        [store_locations]
          find_in=mushboot_available_locations
          [not]
            x,y=$mushboot_available_locations[$mushboot_subscript].x,$mushboot_available_locations[$mushboot_subscript].y
            radius=$mushboot_pad
          [/not]
          variable=mushboot_available_locations
        [/store_locations]
        [if]
          [variable]
            name=mushboot_available_locations.length
            less_than=1
          [/variable]
          [then]
            [set_variable]
              name=mushboot_total
              value=0
            [/set_variable]
          [/then]
        [/if]
        [set_variable]
          name=mushboot_total
          sub=1
        [/set_variable]
      [/do]
    [/while]
    [clear_variable]					# Only need mushboot_locations
      name=mushboot_total, mushboot_available_locations, mushboot_subscript
    [/clear_variable]
  [/event]


# "Mushroom boot" wearer dies
[event]
  name=last breath
  first_time_only=no
  [filter]
    side=1						# Only player units can wear boots
    [not]
      id=Morn,Dawn,Aegis,Jackery,Nippa			# Death of these=defeat
    [/not]
  [/filter]
  {FOREACH mushboot_locations i}
    [if]						# see if unit is wearing "mushroom boots"
      [variable]
        name=mushboot_locations[$i].id
        equals=$unit.id
      [/variable]
    [then]
      [set_variable]
        name=mushboot_locations[$i].x
        value=$x1
      [/set_variable]
      [set_variable]
        name=mushboot_locations[$i].y
        value=$y1
      [/set_variable]
      [set_variable]
        name=mushboot_locations[$i].id
        value=-1
      [/set_variable]
      [item]
        x,y=$x1,$y1
        image=items/mushboot.png
      [/item]
    [/then]
    [/if]
  {NEXT i}
[/event]


# Mushrooms regrow overnight
  [event]
    name=new turn
    first_time_only=no
    [filter_condition]
      [have_location]
        time_of_day_id=dawn
      [/have_location]
    [/filter_condition]
    [terrain]
      terrain=^Em
      find_in=mushlocs
      layer=overlay
    [/terrain]
    [if]			# First time dialogue once mushrooms have been stepped on
      [variable]
        name=mspore_ftd
        equals=no
      [/variable]
    [then]
      [fire_event]
        name=mushlocs_ftd
      [/fire_event]
    [/then]
    [/if]
  [/event]
  [event]
    name=mushlocs_ftd
    [message]
      speaker=Nippa
      message=_"That's worth knowin': them mushrooms have regrown overnight..."
    [/message]
  [/event]


# Event to issue delay and then remove item
  [event]
    name=wait_and_clear
    first_time_only=no
    [delay]
      time=65
    [/delay]
    [remove_item]
      x,y=$x1saved,$y1saved
    [/remove_item]
  [/event]


# Reduce by 1 movement of all units wearing "mushroom boots" at start of turn
  [event]
    name=side 1 turn refresh
    first_time_only=no
    {FOREACH mushboot_locations i}
      [if]
        [variable]
          name=mushboot_locations[$i].id
          not_equals=-1
        [/variable]
      [then]
        [modify_unit]
          [filter]
            id=$mushboot_locations[$i].id
          [/filter]
          moves="$($this_unit.moves -1)"
        [/modify_unit]
      [/then]
      [/if]
    {NEXT i}
  [/event]


# Event when player unit moves to a "mushroom boot" hex
  [event]
    name=moveto
    first_time_only=no
    [filter]
      side=1
      [filter_location]					# Boots in use will have x,y=0,0 so cannot be moved to
        find_in=mushboot_locations
      [/filter_location]
    [/filter]
    [set_variable]
      name=mushboot_hasboots				# =yes if unit already wearing "mushroom boots"
      value=no
    [/set_variable]
    [set_variable]
      name=mushboot_subscript				# Identifies array element in mushboot_locations
      value=-1
    [/set_variable]
    [set_variable]
      name=mushboot_multiboot				# If 2+ sets of boots dropped in same place
      value=0
    [/set_variable]
    {FOREACH mushboot_locations i}
      [if]
        [variable]
          name=mushboot_locations[$i].id
          equals=$unit.id
        [/variable]
      [then]
        [set_variable]					# Unit is already wearing "mushroom boots"
          name=mushboot_hasboots
          value=yes
        [/set_variable]
      [/then]
      [/if]
      [if]
        [variable]
          name=mushboot_locations[$i].x
          numerical_equals=$x1
        [/variable]
        [variable]
          name=mushboot_locations[$i].y
          numerical_equals=$y1
        [/variable]
      [then]
        [set_variable]
          name=mushboot_subscript			# Identify location array element
          value=$i
        [/set_variable]
        [set_variable]
          name=mushboot_multiboot			# Count number of boots dropped at $x1,$y1
          add=1
        [/set_variable]
      [/then]
      [/if]
    {NEXT i}
    [if]
      [variable]
        name=mushboot_subscript				# Identifies array element in mushboot_locations
        numerical_equals=-1
      [/variable]
    [then]
      [message]
        speaker=narrator
        message=_"*Sanity Check Error* [mushboot_locations moveto] element not found!  mushboot_subscript=[$mushboot_subscript]"
      [/message]
    [/then]
    [/if]
    [if]
      [variable]
        name=mushboot_hasboots
        equals=no					# Unit is not already wearing "mushroom boots" so do something
      [/variable]
    [then]
      [if]						# Start of first time dialogue
        [variable]
          name=mushboot_ftd				# First time dialogue (from Nippa or unit)
          equals=yes					# Unit is not already wearing "mushroom boots" so do something
        [/variable]
      [then]
        [if]
          [variable]
            name=unit.id
            not_equals=Nippa
          [/variable]
        [then]
          [message]
            speaker=unit
            message=_"Yuk.  I've found some old, manky boots..."
          [/message]
          [message]
            speaker=Nippa
            message=_"Hang on... thems're overshoes used by mushroom farmers to spread their weight so mushrooms ain't so badly squashed.  They're wet and mouldered but might have some life left.  Could be handy for walkin' over dodgy ground, if you go carefully.  They strap on over your boots but'll prob'ly slow you down a bit."
          [/message]
        [/then]
        [else]
          [message]
            speaker=Nippa
            message=_"Oh, I've found some wet and mouldered overshoes used by mushroom farmers to spread their weight so mushrooms ain't so badly squashed.  They might have some life left.  Could be handy for walkin' over dodgy ground, if you go carefully.  They strap on over your boots but'll prob'ly slow you down a bit."
          [/message]
        [/else]
        [/if]
        [set_variable]
          name=mushboot_ftd
          value=no
        [/set_variable]
      [/then]
      [/if]						# End of first time dialogue
      [set_variable]					# Flag whether or not this unit use the boots
        name=mushboot_user
        value=yes
      [/set_variable]
      [message]
        speaker=narrator
        message=_"Should $unit.name don these boots?"
        image=items/mushboot.png
        [option]
          label=_"Yes (ugh...)"
          [command]
            [if]
              [have_unit]
                x,y=$x1,$y1
                type=Heavy Infantryman, Shock Trooper, Iron Mauler
                side=1
              [/have_unit]
            [then]
              [message]
                speaker=unit
                message=_"They won't fit over my armour."
              [/message]
              [set_variable]
                name=mushboot_user
                value=no
              [/set_variable]
            [/then]
            [/if]
            [if]
              [have_unit]
                x,y=$x1,$y1
                type=Yeoman
                side=1
              [/have_unit]
            [then]
              [message]
                speaker=unit
                message=_"My heavy duty boots are too big."
              [/message]
              [set_variable]
                name=mushboot_user
                value=no
              [/set_variable]
            [/then]
            [/if]
            [if]
              [have_unit]
                x,y=$x1,$y1
                type=Ostler, Horseman, Horseman_p, Knight, Knight_p, Lancer, Grand Knight, Paladin
                side=1
              [/have_unit]
            [then]
              [message]
                speaker=unit
                message=_"I ride a <i>horse</i>..."
              [/message]
              [set_variable]
                name=mushboot_user
                value=no
              [/set_variable]
            [/then]
            [/if]
            [if]
              [variable]
                name=mushboot_user
                equals=yes
              [/variable]
            [then]
              [set_variable]
                name=mushboot_locations[$mushboot_subscript].x
                value=0
              [/set_variable]
              [set_variable]
                name=mushboot_locations[$mushboot_subscript].y
                value=0
              [/set_variable]
              [set_variable]
                name=mushboot_locations[$mushboot_subscript].id
                value=$unit.id
              [/set_variable]
              [if]
                [variable]
                  name=mushboot_multiboot			# Number of boots at $x1,$y1
                  less_than=2
                [/variable]
              [then]
                [remove_item]
                  x,y=$x1,$y1
                  image=items/mushboot.png
                [/remove_item]
              [/then]
              [/if]
              [unit_overlay]
                id=$unit.id
                image=items/mushbootoverlay.png
              [/unit_overlay]
              [if]
                [variable]
                  name=unit.moves
                  greater_than=0
                [/variable]
              [then]
                [modify_unit]
                  [filter]
                    x,y=$x1,$y1
                  [/filter]
                  moves="$($this_unit.moves -1)"
                [/modify_unit]
              [/then]
              [/if]
            [/then]
            [else]
              [allow_undo]
              [/allow_undo]
            [/else]
            [/if]
          [/command]
        [/option]
        [option]
          label=_"No (phew...)"
          [command]
            [allow_undo]
            [/allow_undo]
          [/command]
        [/option]
      [/message]
    [/then]
    [else]
      [allow_undo]
      [/allow_undo]
    [/else]
    [/if]
    [clear_variable]
      name=mushboot_hasboots, mushboot_subscript, mushboot_multiboot
    [/clear_variable]
  [/event]


# Event when non-player unit moves to a "mushroom boot" hex
  [event]
    name=moveto
    first_time_only=no
    [filter]
      [not]
        side=1
      [/not]
      [filter_location]					# Boots in use will have x,y=0,0 so cannot be moved to
        find_in=mushboot_locations
      [/filter_location]
    [/filter]
    [message]
      speaker=unit
      message= _ "Aha!  I'll have these... frekkit!  They fell apart!"
    [/message]
    [set_variable]
      name=mushboot_subscript			# Might be >1 set of boots available at $x1,$y1.  Destroy them all.
      value=1
    [/set_variable]
    [while]
      [variable]
        name=mushboot_subscript
        greater_than=0
      [/variable]
      [do]
        [set_variable]
          name=mushboot_subscript
          value=0
        [/set_variable]
        {FOREACH mushboot_locations i}
          [if]
            [variable]
              name=mushboot_locations[$i].x
              numerical_equals=$x1
            [/variable]
            [variable]
              name=mushboot_locations[$i].y
              numerical_equals=$y1
            [/variable]
          [then]
            [set_variable]
              name=mushboot_subscript			# Identify location array element
              value=$i
            [/set_variable]
          [/then]
          [/if]
        {NEXT i}
        [if]
          [variable]
            name=mushboot_subscript
            greater_than=0
          [/variable]
        [then]
          [clear_variable]
            name=mushboot_locations[$mushboot_subscript]
          [/clear_variable]
          [remove_item]					# Remove boots from map (doesn't hurt to do this more than once)
            x,y=$x1,$y1
            image=items/mushboot.png
          [/remove_item]
        [/then]
        [/if]
      [/do]
    [/while]
    [clear_variable]
      name=mushboot_subscript
    [/clear_variable]
  [/event]


# Event for any unit moving onto small mushrooms (side=1 treated differently)
  [event]
    name=moveto
    first_time_only=no
    [filter]
      [filter_location]
        terrain=*^Em
      [/filter_location]
    [/filter]
    [set_variable]
      name=mushboot_hasboots				# =yes if unit wearing "mushroom boots" (side 1 only)
      value=no
    [/set_variable]
    [if]
      [variable]
        name=unit.side
        numerical_equals=1
      [/variable]
    [then]
      {FOREACH mushboot_locations i}
        [if]
          [variable]
            name=mushboot_locations[$i].id
            equals=$unit.id
          [/variable]
        [then]
          [set_variable]				# Unit is wearing "mushroom boots"
            name=mushboot_hasboots
            value=yes
          [/set_variable]
        [/then]
        [/if]
      {NEXT i}
    [/then]
    [/if]
    [if]
      [variable]
        name=mushboot_hasboots
        equals=no					# Unit is not wearing "mushroom boots"
      [/variable]
    [then]
      [set_variable]
        name=x1saved
        value=$x1
      [/set_variable]
      [set_variable]
        name=y1saved
        value=$y1
      [/set_variable]
      [set_variable]
        name=is_player_unit
        value=yes
      [/set_variable]
#ifdef __UNUSED__
      [fire_event]
        name=mushboot_fire
      [/fire_event]
#endif
      [sound]
        name=squishy-hit.ogg
      [/sound]
      [item]
        x,y=$x1,$y1
        halo="scenery/mspores1.png"
      [/item]
      [fire_event]
        name=wait_and_clear
      [/fire_event]
      [item]
        x,y=$x1,$y1
        halo="scenery/mspores2.png"
      [/item]
      [fire_event]
        name=wait_and_clear
      [/fire_event]
      [sound]
        name=rumble.ogg
      [/sound]
      [item]
        x,y=$x1,$y1
        halo="scenery/mspores3.png"
      [/item]
      [fire_event]
        name=wait_and_clear
      [/fire_event]
      [item]
        x,y=$x1,$y1
        halo="scenery/mspores4.png"
      [/item]
      [fire_event]
        name=wait_and_clear
      [/fire_event]
      [sound]
        name=rustle.ogg
      [/sound]
      [item]
        x,y=$x1,$y1
        halo="scenery/mspores5.png"
      [/item]
      [fire_event]
        name=wait_and_clear
      [/fire_event]
      [item]
        x,y=$x1,$y1
        halo="scenery/mspores6.png"
      [/item]
      [fire_event]
        name=wait_and_clear
      [/fire_event]
      [item]
        x,y=$x1,$y1
        halo="scenery/mspores7.png"
      [/item]
      [fire_event]
        name=wait_and_clear
      [/fire_event]
      [terrain]
        x,y=$x1,$y1
        layer=overlay
        terrain="^"
      [/terrain]
      [set_variable]			# 75% chance of being slowed
        name=mspore_slowed
        rand=no,yes,yes,yes
      [/set_variable]
      [if]
        [variable]
          name=mspore_slowed
          equals=no
        [/variable]
      [then]				# Not slowed units always poisoned (25%)
        [set_variable]
          name=mspore_poisoned
          value=yes
        [/set_variable]
      [/then]
      [else]				# Slowed
        [if]
          [variable]
            name=unit.side
            numerical_equals=1
          [/variable]
        [then]				# Player units cannot be poisoned and slowed...
          [set_variable]
            name=mspore_poisoned
            value=no
          [/set_variable]
        [/then]
        [else]				# ...but enemy units can...
          [set_variable]
            name=mspore_poisoned
            rand=yes,yes,no,no,no
          [/set_variable]
          [modify_unit]
            [filter]
              x,y=$x1,$y1
            [/filter]
            moves=0			# ...also force enemy unit to stay put
          [/modify_unit]
        [/else]
        [/if]
      [/else]
      [/if]
      [if]
        [variable]
          name=mspore_poisoned
          equals=yes
        [/variable]
      [then]				# Poisoned: 8hp damage
        [set_variable]
          name=mspore_damage
          value=8
        [/set_variable]
      [/then]
      [else]
        [if]
          [variable]
            name=unit.side
            numerical_equals=1
          [/variable]
        [then]				# Lower damage range for player units
          [set_variable]
            name=mspore_damage
#ifdef EASY
            rand=4,5,5,6,6,6,7,7,8,9,10
#endif
#ifdef NORMAL
            rand=5,6,6,6,7,7,8,9,10,11
#endif
#ifdef HARD
            rand=6,6,6,7,7,8,9,10,11,12
#endif
          [/set_variable]
        [/then]
        [else]				# Higher damage range for enemy units
          [set_variable]
            name=mspore_damage
#ifdef EASY
            rand=8,9,10,11,12,13,14,15,16,17,18,19,20,21,22
#endif
#ifdef NORMAL
            rand=7,8,9,10,11,12,13,14,15,16,17,18,19,20,21
#endif
#ifdef HARD
            rand=6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
#endif
          [/set_variable]
        [/else]
        [/if]
      [/else]
      [/if]
      [harm_unit]
        [filter]
          x,y=$x1,$y1
        [/filter]
        amount=$mspore_damage
        kill=no				# Do not kill a unit (prevents another enemy unit occupying now-cleared hex)
        animate=defender
        slowed=$mspore_slowed
        poisoned=$mspore_poisoned
        experience=no
      [/harm_unit]
      [redraw]
      [/redraw]
      [if]
        [variable]
          name=mspore_ftd
          equals=yes
        [/variable]
        [have_unit]			# Just in case unit couldn't survive $mspore_damage...
          x,y=$x1,$y1
       [/have_unit]
      [then]
        [set_variable]
          name=mspore_ftd
          value=no
        [/set_variable]
        [message]
          x,y=$x1,$y1
          message= _ "wha? ... -cough- ... <span foreground='#ffff00'><small>spores everywhere... don't feel great...</small></span>"
        [/message]
      [/then]
      [/if]
    [/then]
    [else]
      [allow_undo]
      [/allow_undo]
    [/else]
    [/if]
    [clear_variable]
      name=x1saved,y1saved,mspore_damage,mushboot_hasboots,mspore_slowed,mspore_poisoned
    [/clear_variable]
  [/event]
#enddef


# ----------------------------
# Overlay macros (scenario 17)
# ----------------------------

#define NWMASK1_ON
    [filter_condition]
      [have_location]
        x,y=10,8
        terrain=Xu			# Nwmask1 applied to map
      [/have_location]
    [/filter_condition]
#enddef

#define NWMASK2_ON
    [filter_condition]
      [have_location]
        x,y=2,7 		# Nwmask2 applied
        terrain=Wwf^Uf
      [/have_location]
    [/filter_condition]
#enddef
